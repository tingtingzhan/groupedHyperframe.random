---
title: "Simulated Grouped Hyper Data Frame"
author: Tingting Zhan
date: today
format: 
  html:
    page-layout: full
    html-math-method: katex
    link-external-icon: true
    link-external-newwindow: true
number-sections: true
toc: true
toc-location: left
toc-depth: 4
toc-title: ''
editor: source
bibliography: groupedHyperframe.random.bib
knitr:
  opts_chunk: 
    collapse: true
    comment: "#" 
vignette: >
  %\VignetteIndexEntry{intro}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

# Introduction

This [vignette](https://rpubs.com/tingtingzhan/groupedHyperframe_random) of package **`groupedHyperframe.random`** ([CRAN](https://CRAN.R-project.org/package=groupedHyperframe.random), [Github](https://github.com/tingtingzhan/groupedHyperframe.random)) documents

-   the simulation of superimposed (marked) point-pattern objects via ***vectorized parameterization***;
-   the simulation of grouped hyper data frame via ***matrix parameterization***.



## Prerequisite

Package **`groupedHyperframe.random`** requires R version 4.5.0 (released 2025-04-11) or higher ([macOS](https://cran.r-project.org/bin/macosx/), [Windows](https://cran.r-project.org/bin/windows/base/), [Linux](https://cran.r-project.org/bin/linux/)). 

```{r}
#| code-fold: true
#| code-summary: "Environment on author's computer"
#| label: author-env
# system('sw_vers')
Sys.info()[c('sysname', 'release', 'machine')]
R.version
```


Experimental (and maybe unstable) features are released *extremely frequently* to [Github](https://github.com/tingtingzhan/groupedHyperframe.random). [Active developers should use the Github version; suggestions and bug reports are welcome!]{style="background-color: #FFFF00"} Stable releases to [CRAN](https://CRAN.R-project.org/package=groupedHyperframe.random) are typically updated every 2 to 3 months, or when the authors have an upcoming manuscript in the peer-reviewing process.

```{r}
#| eval: false
pak::pak('tingtingzhan/groupedHyperframe')
pak::pak('tingtingzhan/groupedHyperframe.random')
```

```{r}
#| eval: false
#| code-fold: true
#| code-summary: "Developers, do NOT use the CRAN version!"
utils::install.packages('groupedHyperframe') # Developers, do NOT use!!
utils::install.packages('groupedHyperframe.random') # Developers, do NOT use!!
```

## Getting Started

Examples in this vignette require that the `search` path has

```{r}
library(groupedHyperframe.random)
```

```{r}
#| echo: false
#options(mc.cores = 1L) # for CRAN submission
```

## Acknowledgement

This work is supported by National Institutes of Health, U.S. Department of Health and Human Services grants

-   R01CA222847 ([I. Chervoneva](https://orcid.org/0000-0002-9104-4505), [T. Zhan](https://orcid.org/0000-0001-9971-4844), and [H. Rui](https://orcid.org/0000-0002-8778-261X))
-   R01CA253977 (H. Rui and I. Chervoneva).

# Simulated Point Pattern {#sec-rppp}

Function `.rppp()` simulates `superimpose`d `ppp.object` via [**vectorized parameterization**]{style="background-color: #FFFF00"}. The vectorized parameterization is supported in the specification of both the random point pattern and the random `marks`. Technical details of the vectorized parameterization is covered in Appendix @sec-rppp-appendix.

Example below simulates an $x$- and $y$- `coords`-only, un`marked`, two `superimpose`d @Matern1986's cluster processes $(\kappa, \mu, s)$ `(kappa, mu, scale)` with parameters $(\kappa_1, \mu_1, s_1) = (10,8,.15)$ and $(\kappa_2, \mu_2, s_2) = (5,4,.06)$. A vectorized parameterization of the random point pattern generation is used in the R code below, i.e., `kappa` $= (\kappa_1, \kappa_2)$, `mu` $= (\mu_1, \mu_2)$ and `scale` $= (s_1, s_2)$.

```{r}
set.seed(12); r = .rppp(rMatClust(kappa = c(10, 5), mu = c(8, 4), scale = c(.15, .06)))
```

Example below simulates two `superimpose`d `marked` `ppp.object`s,

-   $x$- and $y$-`coords` by Matérn's cluster process $(\kappa_1,\mu_1,s_1) = (10,8,.15)$, with a log-normal $(\log\mu, \log\sigma)$ `(meanlog, sdlog)` mark with parameters $(\log\mu_1,\log\sigma_1)=(3,.4)$ and a negative-binomial $(r, p)$ `(size, prob)` mark with parameters $(r,p)=(4,.3)$.
-   $x$- and $y$-`coords` by Matérn's cluster process $(\kappa_2,\mu_2,s_2) = (5,4,.06)$, with a log-normal mark $(\log\mu_2,\log\sigma_2)=(5,.2)$ and a negative-binomial mark $(r,p)=(4,.3)$.

A vectorized parameterization of the random `marks` generation is used in the R code below, i.e., `meanlog` $= (\log\mu_1, \log\mu_2)$, `sdlog` $= (\log\sigma_1, \log\sigma_2)$, `size` $=r$ and `prob` $=p$. The shorter arguments of `size` and `prob` are `recycle`d.

```{r}
#| code-summary: Two superimposed Matérn's cluster process with log-normal and negative-binomial marks
set.seed(25); r1 = .rppp(
  rMatClust(kappa = c(10, 5), mu = c(8, 4), scale = c(.15, .06)), 
  rlnorm(meanlog = c(3, 5), sdlog = c(.4, .2)),
  rnbinom(size = 4, prob = .3) # shorter arguments recycled
)
```

Example below simulates two `superimpose`d `marked` `ppp.object`s,

-   $x$- and $y$-`coords` by Poisson point pattern $\lambda$ `lambda` with parameter $\lambda_1=3$, with a log-normal mark $(\log\mu_1,\log\sigma_1)=(3,.4)$ and a negative-binomial mark $(r_1,p_1)=(4,.3)$.
-   $x$- and $y$-`coords` by Poisson point pattern $\lambda_2=6$, with a log-normal mark $(\log\mu_2,\log\sigma_2)=(5,.2)$ and a negative-binomial mark $(r_2,p_2)=(6,.1)$.

```{r}
set.seed(62); r2 = .rppp(
  rpoispp(lambda = c(3, 6)),
  rlnorm(meanlog = c(3, 5), sdlog = c(.4, .2)),
  rnbinom(size = c(4, 6), prob = c(.3, .1))
)
```

User may `superimpose` different (`marked`) point patterns after simulating each of them separately.

```{r}
#| eval: false
spatstat.geom::superimpose(r1, r2)
```

# Simulated `groupedHyperframe` {#sec-grouped_rppp}

Function `grouped_rppp()` simulates `groupedHyperframe` based on population parameters and subject-specific random effects via [**matrix parameterization**]{style="background-color: #FFFF00"}. The matrix parameterization is supported in the specification of both the random point pattern and the random `marks`. Technical details of the matrix parameterization is covered in Appendix @sec-grouped_rppp-appendix.

## with `superimpose`d Matérn's cluster processes {#sec-groupedHyperframe_Matern}

Consider two `superimpose`d Matérn's cluster processes, each with one log-normal mark. The [*population parameters*]{style="background-color: #FFFF00"} are

-   $x$- and $y$-`coords` by Matérn's cluster process $(\kappa_1,\mu_1,s_1) = (3,10,.4)$, with a log-normal mark $(\log\mu_1,\log\sigma_1)=(3,.4)$
-   $x$- and $y$-`coords` by Matérn's cluster process $(\kappa_2,\mu_2,s_2) = (2,5,.2)$, with a log-normal mark $(\log\mu_2,\log\sigma_2)=(5,.2)$

We simulate for three (`3L`) subjects (e.g., patients). The [*subject-specific parameters*]{style="background-color: #FFFF00"} deviate from the population parameters under a [*multivariate normal distribution*]{style="background-color: #FFFF00"} specified with either the standard deviation(s) $\sigma$ or the variance-covariance matrix $\Sigma$. Function `mvrnorm2()` is a wrapper of function `MASS::mvrnorm()` to accept the standard deviation(s) $\sigma$ via parameter `sd`

-   parameter $\sigma$ `sd` may be a `numeric` scalar, indicating an *all-equal* `diag`onal-`var`iance zero-`cov`ariance matrix. In this example we have random effect standard deviations of $\sigma_\kappa=.2$, $\sigma_\mu=.5$, $\sigma_s=.05$, $\sigma_{\log\mu}=.1$ and $\sigma_{\log\sigma}=.01$.
-   parameter $\sigma$ `sd` may be a `numeric` `vector` of the same length as parameter $\mu$ `mu`, indicating a `diag`onal-`var`iance zero-`cov`ariance matrix.
-   To specify a full variance-covariance matrix $\Sigma$, user should use function `MASS::mvrnorm()`.

We must make sure that all subject-specific parameters satisfy that `kappa` $\kappa>1$, `mu` $\mu>1$, `scale` $s>0$ for Matérn's cluster processes, and `sdlog` $\log\sigma>0$ for log-normal distribution.

```{r}
set.seed(39); p_Matern = mapply(
  FUN = mvrnorm2, 
  mu = list(kappa = c(3,2), mu = c(10,5), scale = c(.4,.2), meanlog = c(3,5), sdlog = c(.4,.2)), 
  sd = list(kappa = .2, mu = .5, scale = .05, meanlog = .1, sdlog = .01), 
  MoreArgs = list(n = 3L), 
  SIMPLIFY = FALSE
) |>
  within.list(expr = {
    kappa = pmax(kappa, 1 + .Machine$double.eps)
    mu = pmax(mu, 1 + .Machine$double.eps)
    scale = pmax(scale, .Machine$double.eps)
    sdlog = pmax(sdlog, .Machine$double.eps)
  })
```

The subject-specific parameters *`p_Matern`* are stored in a `list` of `matrix`-es. Each `matrix` has three (`3L`) rows for the three (`3L`) subjects, and two (`2L`) columns for the two (`2L`) Matérn's cluster processes to be `superimpose`d.

```{r}
#| code-fold: true
#| code-summary: "Subject-specific parameters *`p_Matern`*"
p_Matern
```

We simulate one (`1L`) to four (`4L`) `ppp.object`s (e.g., medical images) for each of the three (`3L`) subjects (e.g., patients).

```{r}
#| label: n_grouped_rppp
set.seed(37); (n = sample(x = 1:4, size = 3L, replace = TRUE)) 
```

Function `grouped_rppp()` simulates a `groupedHyperframe` with a `ppp`-hypercolumn, and one-or-more columns of the grouping structure.

```{r}
set.seed(76); r_Matern = p_Matern |> 
  with.default(expr = {
    grouped_rppp(
      rMatClust(kappa = kappa, scale = scale, mu = mu), 
      rlnorm(meanlog = meanlog, sdlog = sdlog),
      n = n
    )
  })
```

```{r}
#| code-fold: true
#| code-summary: Simulated `groupedHyperframe` *`r_Matern`*
r_Matern
```

## with `superimpose`d Poisson point pattern

Consider two `superimpose`d Poisson point pattern, each with one negative-binomial mark. The [*population parameters*]{style="background-color: #FFFF00"} are

-   $x$- and $y$-`coords` by Poisson point pattern $\lambda_1=3$, with a negative-binomial mark $(r_1,p_1)=(4,.3)$.
-   $x$- and $y$-`coords` by Poisson point pattern $\lambda_2=6$, with a negative-binomial mark $(r_2,p_2)=(6,.1)$.

We also simulate for three (`3L`) subjects (e.g., patients). The [*subject-specific parameters*]{style="background-color: #FFFF00"} deviate from the population parameters under a [*multivariate normal distribution*]{style="background-color: #FFFF00"} specified with either the standard deviation(s) $\sigma$ or the variance-covariance matrix $\Sigma$. Let the random effect standard deviations be $\sigma_\lambda=.1$, $\sigma_r=.2$ and $\sigma_p=.05$. We must make sure that all subject-specific parameters satisfy that `lambda` $\lambda>0$ for Poisson point pattern, and `size` $r>0$, `prob` $0<p<1$ for negative-binomial distribution.

```{r}
set.seed(39); p_Poisson = mapply(
  FUN = mvrnorm2, 
  mu = list(lambda = c(3, 6), size = c(4, 6), prob = c(.3, .1)), 
  sd = list(lambda = .1, size = .2, prob = .05), 
  MoreArgs = list(n = 3L), 
  SIMPLIFY = FALSE
) |>
  within.list(expr = {
    lambda = pmax(lambda, .Machine$double.eps)
    size = pmax(size, .Machine$double.eps)
    prob = pmin(pmax(prob, .Machine$double.eps), 1 - .Machine$double.eps)
  })
```

```{r}
#| code-fold: true
#| code-summary: "Subject-specific parameters *`p_Poisson`*"
p_Poisson
```

We simulate one (`1L`) to four (`4L`) `ppp.object`s (e.g., medical images) for each of the three (`3L`) subjects (e.g., patients), using the same grouping size as in @sec-groupedHyperframe_Matern.

```{r}
<<n_grouped_rppp>>
```

```{r}
set.seed(76); r_Poisson = p_Poisson |> 
  with.default(expr = {
    grouped_rppp(
      rpoispp(lambda = lambda),
      rnbinom(size = size, prob = prob),
      n = n
    )
  })
```

```{r}
#| code-fold: true
#| code-summary: Simulated `groupedHyperframe` *`r_Poisson`*
r_Poisson
```

## Superimpose `groupedHyperframe`

The `S3` method dispatch `groupedHyperframe::superimpose.groupedHyperframe()` superimposes multiple simulated `groupedHyperframe`s with different point patterns. Users are encouraged to read package **`groupedHyperframe`** vignette (CRAN, [RPubs](https://rpubs.com/tingtingzhan/groupedHyperframe)), Appendix section *On `hyperframe`* for more details.

```{r}
r = superimpose.groupedHyperframe(r_Matern, r_Poisson)
```

User may check the return of superimpose.

```{r}
#| fig-show: hide
#| code-fold: true
#| code-summary: Plot suppressed to reduce vignette size
plot(r_Matern$ppp[[1L]])
plot(r_Poisson$ppp[[1L]])
plot(r$ppp[[1L]])
```

# Appendix

Technical details, as well as the minor and/or experimental features, are covered in the Appendix, in order not to interrupt the main narrative of this vignette.

All R code-chunks are folded in the Appendix, for ease of navigation. They are categorized as

-   **Data**, to create an R object for further operations.
-   **Review**, to demonstrate functions shipped with vanilla `r R.version.string`, or from other packages.
-   **Example**, to demonstrate functions from package **`groupedHyperframe`**.
-   **Advanced**, discussions for R experts.
-   **Figure**, to create a `ggplot`.
-   **Workaround**, to provide alternative solutions to a problem.


## About


R terminology might be different from that of mathematics and statistics. Please refer to Appendix @sec-terms for explanation and reference of the terms and abbreviations used in this vignette.

### Environment {#sec-envir}

This vignette is created under `r R.version$version.string` with the aid of packages **`knitr`** [@knitr, v`r packageVersion('knitr')`], **`quarto`** [@quarto, v`r packageVersion('quarto')` with [Quarto](https://quarto.org/docs/get-started/) v`r quarto::quarto_version()`] and **`rmarkdown`** [@rmarkdown, v`r packageVersion('rmarkdown')`]. Documentation is supported by package **`roxygen2`** [@roxygen2, v`r packageVersion('roxygen2')`].

An Integrated Development Environment (IDE), e.g., [RStudio](https://posit.co/download/rstudio-desktop/) [@RStudio] or [Positron](https://positron.posit.co/download.html), is not required, but highly recommended.

### Enhancement {#sec-enhance}


Package **`groupedHyperframe.random`** `Enhances` the package **`spatstat.random`** [@spatstat15; @spatstat05, dev v`r packageVersion('spatstat.random')`].

### Dependency {#sec-depend}

Package **`groupedHyperframe.random`** `Depends` on packages

-   `r '\U1f5dd'` **`groupedHyperframe`** [@groupedHyperframe, v`r packageVersion('groupedHyperframe')`], key dependency, for grouped hyper data frame. Specifically, the function `groupedHyperframe::superimpose.groupedHyperframe()`

Package **`groupedHyperframe.random`** `Imports` packages

-   **`cli`** [@cli, v`r packageVersion('cli')`], for attractive command line interfaces
-   `r '\U1f5dd'` **`MASS`** [@MASS, v`r packageVersion('MASS')`], key dependency, for function `MASS::mvrnorm()`
-   `r '\U1f5dd'` **`spatstat.geom`** (dev v`r packageVersion('spatstat.geom')`) and **`spatstat.random`** (dev v`r packageVersion('spatstat.random')`) [@spatstat15; @spatstat05], key dependency, for operation and simulation of `ppp.object` and `marks`
-   `r '\U1f5dd'` **`groupedHyperframe`** [@groupedHyperframe, v`r packageVersion('groupedHyperframe')`], key dependency, for function `` groupedHyperframe::`append_marks<-`() ``

## `rfactor()`

Function `rfactor()` is a wrapper of function `base::sample.int()`. Function `rfactor()`

-   has first parameter `n` of the random sample size, similar to functions `stats::rlnorm()`, `stats::rnbinom()`, etc.
-   returns a `factor`

```{r}
#| code-fold: true
#| code-summary: '**Example**: `rfactor()`'
set.seed(18); rfactor(n = 20L, prob = c(4,2,3))
```

```{r}
#| code-fold: true
#| code-summary: '**Example**: `rfactor()` with `levels`'
set.seed(18); rfactor(n = 20L, prob = c(4,2,3), levels = letters[1:3])
```

## `.rppp()` {#sec-rppp-appendix}

Function `.rppp()` implements the vectorized parameterization using advanced R `language` operations. The code snippet inside function `.rppp()` in @sec-rppp **cannot** be taken outside function `.rppp()`!

```{r}
#| code-fold: true
#| code-summary: '**Advanced**: without `language` operation'
tryCatch(expr = {
  spatstat.random::rMatClust(kappa = c(10, 5), mu = c(8, 4), scale = c(.15, .06))
}, error = identity)
```

The native pipe operator `|>` introduced since R 4.1.0 successfully passes the code snippet into function `.rppp()`.

```{r}
#| code-fold: true
#| code-summary: '**Advanced**: `language` operation via native pipe `|>`'
set.seed(12); r = rMatClust(kappa = c(10, 5), mu = c(8, 4), scale = c(.15, .06)) |>
  .rppp()
```

The pipe operator `%>%` from package **`magrittr`** [@magrittr, v`r packageVersion('magrittr')`] does not pass the code snippet into function `.rppp()`!

```{r}
#| code-fold: true
#| code-summary: '**Advanced**: `language` operation via `` magrittr::`%>%` ``'
library(magrittr)
tryCatch(expr = {
  rMatClust(kappa = c(10, 5), mu = c(8, 4), scale = c(.15, .06)) %>% 
    .rppp()
}, error = identity)
```

## `grouped_rppp()` {#sec-grouped_rppp-appendix}

Function `grouped_rppp()` implements the matrix parameterization using advanced R `language` operations. The code snippet inside function `grouped_rppp()` in @sec-grouped_rppp **cannot** be taken outside function `grouped_rppp()`!

```{r}
#| code-fold: true
#| code-summary: '**Advanced**: without `language` operation'
tryCatch(expr = {
  p_Matern |> 
    with.default(expr = {
      spatstat.random::rMatClust(kappa = kappa, scale = scale, mu = mu)
    })
}, error = identity)
```

Similarly, the native pipe operator `|>` introduced since R 4.1.0 successfully passes the code snippet into function `grouped_rppp()`, while the pipe operator `%>%` from package **`magrittr`** [@magrittr, v`r packageVersion('magrittr')`] does not pass the code snippet into function `grouped_rppp()`!


```{r}
#| code-fold: true
#| code-summary: '**Advanced**: `language` operation via native pipe `|>`'
<<n_grouped_rppp>>
p_Matern |> 
  with.default(expr = {
    rMatClust(kappa = kappa, scale = scale, mu = mu) |> 
      grouped_rppp(n = n)
  })
```

```{r}
#| code-fold: true
#| code-summary: '**Advanced**: `language` operation via `` magrittr::`%>%` ``'
library(magrittr)
<<n_grouped_rppp>>
tryCatch(expr = {
  p_Matern |> 
    with.default(expr = {
      rMatClust(kappa = kappa, scale = scale, mu = mu) %>% 
        grouped_rppp(n = n)
  })
}, error = identity)
```

## Similar Packages

### 🚧 **`scSpatialSIM`** [@scSpatialSIM, v`r packageVersion('scSpatialSIM')`]

The authors of package **`scSpatialSIM`** [@scSpatialSIM, v`r packageVersion('scSpatialSIM')`] explains that [@Soupir25],

-   🚧 difference 1
-   🚧 difference 2



# Terms & Abbreviations {#sec-terms}

@tbl-Rterm presents a comprehensive glossary of R terms and abbreviations used in this vignette.  

R terminology and nomenclature could be *drastically different* from that of mathematics and statistics.  Users are *strongly advised* to read closely from the links in @tbl-Rterm, which point to webpages on [search.r-project.org](https://search.r-project.org), [cran.r-project.org](https://cran.r-project.org), and [en.wikipedia.org](https://en.wikipedia.org).


<details>

<summary>@tbl-Rterm: Terms & Abbreviations in R</summary>


| Term / Abbreviation | Description |
|:------------------------------------|:------------------------------------|
| [`|>`](https://search.r-project.org/R/refmans/base/html/pipeOp.html) | Forward pipe operator introduced since R 4.1.0 |
| CRAN, R | [The Comprehensive R Archive Network](https://cran.r-project.org) |
| [`%>%`](https://search.r-project.org/CRAN/refmans/magrittr/html/pipe.html) | Pipe operator, from package **`magrittr`** [@magrittr] |
| [`coords`](https://search.r-project.org/CRAN/refmans/spatstat.geom/html/coords.html) | $x$- and $y$-coordinates, from package **`spatstat.geom`** [@spatstat05] |
| [`diag`](https://search.r-project.org/R/refmans/base/html/diag.html) | Matrix diagonals |
| [`factor`](https://search.r-project.org/R/refmans/base/html/factor.html) | Categorical object in R |
| [`groupedHyperframe`](https://CRAN.R-project.org/package=groupedHyperframe) | Grouped hyper data frame, from package **`groupedHyperframe`** [@groupedHyperframe] |
| `hypercolumns`, [`hyperframe`](https://search.r-project.org/CRAN/refmans/spatstat.geom/html/hyperframe.html) | (Hyper columns of) hyper data frame, from package **`spatstat.geom`** [@spatstat05] |
| [`language`](https://search.r-project.org/R/refmans/base/html/is.language.html) | Language object in R |
| [`marks`](https://search.r-project.org/CRAN/refmans/spatstat.geom/html/spatstat.geom-internal.html), [`marked`](https://search.r-project.org/CRAN/refmans/spatstat.geom/html/is.marked.html) | Marks of a point pattern |
| [`match.call`](https://search.r-project.org/R/refmans/base/html/match.call.html) | Argument matching |
| [`mapply`](https://search.r-project.org/R/refmans/base/html/mapply.html) | Apply a [`function`](https://search.r-project.org/R/refmans/base/html/function.html) to multiple [`list`](https://search.r-project.org/R/refmans/base/html/list.html) or [`vector`](https://search.r-project.org/R/refmans/base/html/vector.html) arguments |
| [`mvrnorm`](https://search.r-project.org/CRAN/refmans/MASS/html/mvrnorm.html) | Multivariate normal random variable, from package **`MASS`** [@MASS] |
| [`pmax`, `pmin`](https://search.r-project.org/R/refmans/base/html/Extremes.html) | Parallel maxima and minima |
| [`ppp`](https://search.r-project.org/CRAN/refmans/spatstat.geom/html/ppp.html), [`ppp.object`](https://search.r-project.org/CRAN/refmans/spatstat.geom/html/ppp.object.html) | (Marked) point pattern, from package **`spatstat.geom`** [@spatstat05] |
| `recycle` | Recycling, <https://r4ds.had.co.nz/vectors.html#scalars-and-recycling-rules> |
| [`rlnorm`](https://search.r-project.org/R/refmans/stats/html/Lognormal.html) | Log normal random variable |
| [`rMatClust`](https://search.r-project.org/CRAN/refmans/spatstat.random/html/rMatClust.html) | @Matern1986's cluster process [@rMatClust], from package **`spatstat.random`** [@spatstat05] |
| [`rnbinom`](https://search.r-project.org/R/refmans/stats/html/NegBinomial.html) | Negative binomial random variable |
| [`rpoispp`](https://search.r-project.org/CRAN/refmans/spatstat.random/html/rpoispp.html) | Poisson point pattern, from package **`spatstat.random`** [@spatstat05] |
| [`sample`, `sample.int`](https://search.r-project.org/R/refmans/base/html/sample.html) | Random sampling |
| [`search`](https://search.r-project.org/R/refmans/base/html/search.html) | Search path for R objects |
| [`superimpose`](https://search.r-project.org/CRAN/refmans/spatstat.geom/html/superimpose.html) | Superimpose, from package **`spatstat.geom`** [@spatstat05] |
| [`tryCatch`](https://search.r-project.org/R/refmans/base/html/conditions.html) | Condition handling and recovery |
| [`var`, `cor`, `cov`](https://search.r-project.org/R/refmans/stats/html/cor.html) | Variance, correlation, covariance |

: Terms & Abbreviations in R {#tbl-Rterm}

</details>

# References {.appendix}

::: {#refs}
:::
