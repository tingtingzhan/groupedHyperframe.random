---
title: "Simulated Grouped Hyper Data Frame"
author: Tingting Zhan
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    page-layout: full
    html-math-method: katex
toc: true
toc-location: left
toc-depth: 4
toc-title: ''
editor: source
bibliography: groupedHyperframe.random.bib
knitr:
  opts_chunk: 
    collapse: true
    comment: "#>" 
vignette: >
  %\VignetteIndexEntry{intro}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

# Introduction

This vignette of package **`groupedHyperframe.random`** ([CRAN](https://CRAN.R-project.org/package=groupedHyperframe.random), [Github](https://github.com/tingtingzhan/groupedHyperframe.random), [RPubs](https://rpubs.com/tingtingzhan/groupedHyperframe_random)) documents

-   the simulation of `superimpose`d (marked) point-pattern `ppp.object`
-   the simulation of grouped hyper data frame `groupedHyperframe`.

R terminology might be different from that of mathematics and statistics. Please refer to Appendix @sec-terms for explanation and reference of the terms and abbreviations used in this vignette.

Package **`groupedHyperframe.random`** `Enhances` the package **`spatstat.random`** (dev v`r packageVersion('spatstat.random')`).

Package **`groupedHyperframe.random`** `Imports` packages

-   **`cli`** [@cli, v`r packageVersion('cli')`], for attractive **c**ommand **l**ine **i**nterfaces
-   `r '\U1f5dd'` **`MASS`** [@MASS, v`r packageVersion('MASS')`], key dependency, for function `MASS::mvrnorm`
-   `r '\U1f5dd'` **`spatstat.geom`** (dev v`r packageVersion('spatstat.geom')`), @spatstat15, key dependency, for operations on `ppp.object` and `marks`
-   `r '\U1f5dd'` **`spatstat.random`** (dev v`r packageVersion('spatstat.random')`), @spatstat15, key dependency, for simulation of `ppp.object`
-   `r '\U1f5dd'` **`groupedHyperframe`** [@groupedHyperframe, v`r packageVersion('groupedHyperframe')`], key dependency, for grouped hyper data frame

## Prerequisite

Package **`groupedHyperframe.random`** requires R version 4.5.0 (released 2025-04-11) or higher. [RStudio](https://posit.co/download/rstudio-desktop/) is not required, but highly recommended. This vignette is generated under `r R.version$version.string` using packages **`knitr`** [@knitr, v`r packageVersion('knitr')`], **`quarto`** [@quarto, v`r packageVersion('quarto')`], **`rmarkdown`** [@rmarkdown, v`r packageVersion('rmarkdown')`], and the development versions of the **`spatstat`** family of packages [@spatstat15; @spatstat05].

```{r}
#| label: prerequisite
#| warning: false
#| eval: false
remotes::install_github('spatstat/spatstat', upgrade = 'always')
remotes::install_github('spatstat/spatstat.data', upgrade = 'always')
remotes::install_github('spatstat/spatstat.explore', upgrade = 'always')
remotes::install_github('spatstat/spatstat.geom', upgrade = 'always')
remotes::install_github('spatstat/spatstat.linnet', upgrade = 'always')
remotes::install_github('spatstat/spatstat.model', upgrade = 'always')
remotes::install_github('spatstat/spatstat.random', upgrade = 'always')
remotes::install_github('spatstat/spatstat.sparse', upgrade = 'always')
remotes::install_github('spatstat/spatstat.univar', upgrade = 'always')
remotes::install_github('spatstat/spatstat.utils', upgrade = 'always')
```

Experimental (and maybe unstable) features are released *extremely frequently* to [Github](https://github.com/tingtingzhan/groupedHyperframe.random). [Active developers should use the Github version; suggestions and bug reports are welcome!]{style="background-color: #FFFF00"}

```{r}
#| warning: false
#| eval: false
remotes::install_github('tingtingzhan/groupedHyperframe.random')
```

Stable releases to [CRAN](https://CRAN.R-project.org/package=groupedHyperframe.random) are typically updated every 2 to 3 months, or when the authors have an upcoming manuscript in the peer-reviewing process.

```{r}
#| warning: false
#| eval: false
utils::install.packages('groupedHyperframe.random') # Developers, do NOT use!!
```

## Note to Users

Examples in this vignette require that the `search` path has

```{r}
library(groupedHyperframe.random)
```

```{r}
#| echo: false
#options(mc.cores = 1L) # for CRAN submission
```

## Acknowledgement

This work is supported by National Institutes of Health, U.S. Department of Health and Human Services grants

-   R01CA222847 ([I. Chervoneva](https://orcid.org/0000-0002-9104-4505), [T. Zhan](https://orcid.org/0000-0001-9971-4844), and [H. Rui](https://orcid.org/0000-0002-8778-261X))
-   R01CA253977 (H. Rui and I. Chervoneva).

# Simulated Point Pattern

Function `.rppp()` simulates `superimpose`d `ppp.object`s with *vectorized* parameterization of random point pattern and distribution of `marks`. Function `.rppp()` returns a `ppp.object`.

## Simulated un`marked` Point Pattern

Example below simulates a `coords`-only, un`marked`, two `superimpose`d @Matern1986's cluster processes $(\kappa, \mu, s) = (10,8,.15)$ and $(5,4,.06)$.

```{r}
set.seed(125); r = .rppp(rMatClust(kappa = c(10, 5), mu = c(8, 4), scale = c(.15, .06)))
```

## Simulated `marked` Point Pattern

Example below simulates two `superimpose`d `marked` `ppp`s,

-   Matérn's cluster process $(\kappa_1,\mu_1,s_1) = (10,8,.15)$, with a log-normal `mark` $(\log\mu_1,\log\sigma_1)=(3,.4)$ and a negative-binomial `mark` $(r,p)=(4,.3)$.

-   Matérn's cluster process $(\kappa_2,\mu_2,s_2) = (5,4,.06)$, with a log-normal `mark` $(\log\mu_2,\log\sigma_2)=(5,.2)$ and a negative-binomial `mark` $(r,p)=(4,.3)$.

```{r}
#| code-summary: Two superimposed Matérn's cluster process with log-normal and negative-binomial marks
set.seed(125); r1 = .rppp(
  rMatClust(kappa = c(10, 5), mu = c(8, 4), scale = c(.15, .06)), 
  rlnorm(meanlog = c(3, 5), sdlog = c(.4, .2)),
  rnbinom(size = 4, prob = .3) # shorter parameter recycled
)
```

Example below simulates two `superimpose`d `marked` `ppp`s,

-   Poisson point pattern $\lambda_1=3$, with a log-normal `mark` $(\log\mu_1,\log\sigma_1)=(3,.4)$ and a negative-binomial `mark` $(r_1,p_1)=(4,.3)$.

-   Poisson point pattern $\lambda_2=6$, with a log-normal `mark` $(\log\mu_2,\log\sigma_2)=(5,.2)$ and a negative-binomial `mark` $(r_2,p_2)=(6,.1)$.

```{r}
set.seed(62); r2 = .rppp(
  rpoispp(lambda = c(3, 6)),
  rlnorm(meanlog = c(3, 5), sdlog = c(.4, .2)),
  rnbinom(size = c(4, 6), prob = c(.3, .1))
)
```

In the foreseeable future we will not support simulating more than one type of point patterns in a single call to function `.rppp()`. End user may manually `superimpose` different (`marked`) point patterns after simulating each of them separately.

```{r}
#| eval: false
spatstat.geom::superimpose(r1, r2)
```

# Simulated `groupedHyperframe`

Function `grouped_rppp()` simulates `groupedHyperframe` based on population parameters and subject-specific random effects.

## with Matérn's cluster processes {#sec-groupedHyperframe_Matern}

Consider two `superimpose`d Matérn's cluster processes, each with one log-normal `mark`. The population parameters are

-   Matérn's cluster process $(\kappa_1,\mu_1,s_1) = (3,10,.4)$, with a log-normal `mark` $(\log\mu_1,\log\sigma_1)=(3,.4)$
-   Matérn's cluster process $(\kappa_2,\mu_2,s_2) = (2,5,.2)$, with a log-normal `mark` $(\log\mu_2,\log\sigma_2)=(5,.2)$

We simulate for three (3) subjects (e.g., patients). The subject-specific parameters deviate from the population parameters under a multivariate normal distribution specified with either the standard deviations `sd` $\sigma$, or the variance-covariance matrix `Sigma` $\Sigma$. The standard deviations `sd` may be specified by a `numeric` scalar, indicating all-equal `diag`onal `var`iances and zero `cor`relations/`cov`ariances. In this example we have random effect standard deviations of $\sigma_\kappa=.2$, $\sigma_\mu=.5$, $\sigma_s=.05$, $\sigma_{\log\mu}=.1$ and $\sigma_{\log\sigma}=.01$. We must make sure that all subject-specific parameters satisfy that $\kappa>1$, $\mu>1$, $s>0$ for Matérn's cluster processes, and $\log\sigma>0$ for log-normal distribution. Each `matrix` of the subject-specific parameters has the subjects on the rows, and the parameters of the `ppp.object`s to be `superimpose`d on the columns.

```{r}
set.seed(39); p_Matern = mapply(
  FUN = mvrnorm2, 
  mu = list(kappa = c(3,2), mu = c(10,5), scale = c(.4,.2), meanlog = c(3,5), sdlog = c(.4,.2)), 
  sd = list(kappa = .2, mu = .5, scale = .05, meanlog = .1, sdlog = .01), 
  MoreArgs = list(n = 3L), 
  SIMPLIFY = FALSE
) |>
  within.list(expr = {
    kappa = pmax(kappa, 1 + .Machine$double.eps)
    mu = pmax(mu, 1 + .Machine$double.eps)
    scale = pmax(scale, .Machine$double.eps)
    sdlog = pmax(sdlog, .Machine$double.eps)
  })
```

```{r}
#| code-fold: true
#| code-summary: Subject-specific parameters
p_Matern
```

We simulate one (1) to four (4) `ppp.object`s (e.g., medical images) for each of the three (3) subjects (e.g., patients).

```{r}
set.seed(37); (n = sample(x = 1:4, size = 3L, replace = TRUE)) 
```

Function `grouped_rppp()` simulates a `groupedHyperframe` with a `ppp`-hypercolumn, and one-or-more columns of the grouping structure.

```{r}
set.seed(76); r_Matern = p_Matern |> 
  with.default(expr = {
    grouped_rppp(
      rMatClust(kappa = kappa, scale = scale, mu = mu), 
      rlnorm(meanlog = meanlog, sdlog = sdlog),
      n = n
    )
  })
```

```{r}
#| code-fold: true
#| code-summary: Simulated `groupedHyperframe` *`r_Matern`*
r_Matern
```

## with Poisson point pattern

Consider two `superimpose`d Poisson point pattern, each with one negative-binomial `mark`. The population parameters are

-   Poisson point pattern $\lambda_1=3$, with a negative-binomial `mark` $(r_1,p_1)=(4,.3)$.
-   Poisson point pattern $\lambda_2=6$, with a negative-binomial `mark` $(r_2,p_2)=(6,.1)$.

We also simulate for three (3) subjects (e.g., patients). Let the random effect standard deviations be $\sigma_\lambda=.1$, $\sigma_r=.2$ and $\sigma_p=.05$. We must make sure that all subject-specific parameters satisfy that $\lambda>0$ for Poisson point pattern, and $r>0$, $0<p<1$ for negative-binomial distribution.

```{r}
set.seed(39); p_Poisson = mapply(
  FUN = mvrnorm2, 
  mu = list(lambda = c(3, 6), size = c(4, 6), prob = c(.3, .1)), 
  sd = list(lambda = .1, size = .2, prob = .05), 
  MoreArgs = list(n = 3L), 
  SIMPLIFY = FALSE
) |>
  within.list(expr = {
    lambda = pmax(lambda, .Machine$double.eps)
    size = pmax(size, .Machine$double.eps)
    prob = pmin(pmax(prob, .Machine$double.eps), 1 - .Machine$double.eps)
  })
```

```{r}
#| code-fold: true
#| code-summary: Subject-specific parameters
p_Poisson
```

We simulate one (1) to four (4) `ppp.object`s (e.g., medical images) for each of the three (3) subjects (e.g., patients), using the same grouping size as in @sec-groupedHyperframe_Matern.

```{r}
set.seed(76); r_Poisson = p_Poisson |> 
  with.default(expr = {
    grouped_rppp(
      rpoispp(lambda = lambda),
      rnbinom(size = size, prob = prob),
      n = n
    )
  })
```

```{r}
#| code-fold: true
#| code-summary: Simulated `groupedHyperframe` *`r_Poisson`*
r_Poisson
```

## Superimpose

Users may use the S3 method dispatch `groupedHyperframe::superimpose.groupedHyperframe()` to superimpose multiple simulated `groupedHyperframe`s with different point patterns. Users are encouraged to read the vignette (CRAN, [RPubs](https://rpubs.com/tingtingzhan/groupedHyperframe)) of package **`groupedHyperframe`**, Appendix section *On `hyperframe`* for more details.

```{r}
r = superimpose.groupedHyperframe(r_Matern, r_Poisson)
```

User may check the return of superimpose.

```{r}
#| fig-show: hide
#| code-fold: true
#| code-summary: Plot suppressed to reduce vignette size
plot(r_Matern$ppp[[1L]])
plot(r_Poisson$ppp[[1L]])
plot(r$ppp[[1L]])
```

# Appendix

## Terms & Abbreviations {#sec-terms}

| Term / Abbreviation | Description |
|------------------------------------|------------------------------------|
| [`|>`](https://search.r-project.org/R/refmans/base/html/pipeOp.html) | Forward pipe operator introduced since `R` 4.1.0 |
| `CRAN`, `R` | [The Comprehensive R Archive Network](https://cran.r-project.org) |
| [`coords`](https://search.r-project.org/CRAN/refmans/spatstat.geom/html/coords.html) | $x$- and $y$-coordinates, from package **`spatstat.geom`** [@spatstat05] |
| [`diag`](https://search.r-project.org/R/refmans/base/html/diag.html) | Matrix diagonals |
| [`groupedHyperframe`](https://CRAN.R-project.org/package=groupedHyperframe) | Grouped hyper data frame, from package **`groupedHyperframe`** [@groupedHyperframe] |
| `hypercolumns`, [`hyperframe`](https://search.r-project.org/CRAN/refmans/spatstat.geom/html/hyperframe.html) | (Hyper columns of) hyper data frame, from package **`spatstat.geom`** [@spatstat05] |
| [`marks`](https://search.r-project.org/CRAN/refmans/spatstat.geom/html/spatstat.geom-internal.html), [`marked`](https://search.r-project.org/CRAN/refmans/spatstat.geom/html/is.marked.html) | Marks of a point pattern |
| [`pmax`, `pmin`](https://search.r-project.org/R/refmans/base/html/Extremes.html) | Parallel maxima and minima |
| [`ppp`](https://search.r-project.org/CRAN/refmans/spatstat.geom/html/ppp.html), [`ppp.object`](https://search.r-project.org/CRAN/refmans/spatstat.geom/html/ppp.object.html) | (Marked) point pattern |
| `recycle` | Recycling, <https://r4ds.had.co.nz/vectors.html#scalars-and-recycling-rules> |
| [`rlnorm`](https://search.r-project.org/R/refmans/stats/html/Lognormal.html) | Log normal random variable |
| [`rMatClust`](https://search.r-project.org/CRAN/refmans/spatstat.random/html/rMatClust.html) | @Matern1986's cluster process [@rMatClust], from package **`spatstat.random`** |
| [`mvrnorm`](https://search.r-project.org/CRAN/refmans/MASS/html/mvrnorm.html), `rmvnorm_` | Multivariate normal random variable, from package **`MASS`** [@MASS]; `groupedHyperframe.random::rmvnorm_` |
| [`rnbinom`](https://search.r-project.org/R/refmans/stats/html/NegBinomial.html) | Negative binomial random variable |
| [`rpoispp`](https://search.r-project.org/CRAN/refmans/spatstat.random/html/rpoispp.html) | Poisson point pattern, from package **`spatstat.random`** |
| [`superimpose`](https://search.r-project.org/CRAN/refmans/spatstat.geom/html/superimpose.html) | Superimpose, from package **`spatstat.geom`** |
| [`var`, `cor`, `cov`](https://search.r-project.org/R/refmans/stats/html/cor.html) | Variance, correlation, covariance |

# References

::: {#refs}
:::
